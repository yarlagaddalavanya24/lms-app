name: eks deployment

on:
  workflow_dispatch:

jobs:
  eks-deployment:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Slack Notification - Start
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "üöÄ GitHub Actions workflow for LMS EKS deployment has started.",
              "channel": "all-project"
            }

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update AWS CLI
        run: |
          sudo apt install unzip -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Install kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.31.3/2024-12-12/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Connect to EKS Cluster
        run: aws eks update-kubeconfig --region us-east-1 --name lms-cluster

      - name: Apply Database Resources
        run: |
          kubectl apply -f .github/workflows/k8s/pg-secret.yml
          kubectl apply -f .github/workflows/k8s/pg-deployment.yml
          kubectl apply -f .github/workflows/k8s/pg-service.yml

      - name: Build Backend Image
        run: |
          cd api
          docker build -t ${{ vars.DOCKER_USERNAME }}/api:latest .

      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend Image
        run: |
          docker push ${{ vars.DOCKER_USERNAME }}/api:latest

      - name: Backend Deployment
        run: |
          kubectl apply -f .github/workflows/k8s/be-configmap.yml
          kubectl apply -f .github/workflows/k8s/be-deployment.yml
          kubectl apply -f .github/workflows/k8s/be-service.yml

      - name: Get Backend Service LoadBalancer URL
        run: |
          echo "Waiting for Backend LoadBalancer external IP..."
          for i in {1..10}; do
            BACKEND_IP=$(kubectl get svc be-service -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [[ "$BACKEND_IP" != "" ]]; then
              echo "‚úÖ Backend is available at: http://$BACKEND_IP"
              echo "BACKEND_URL=http://$BACKEND_IP" >> $GITHUB_ENV
              break
            fi
            echo "‚è≥ Waiting 15s for ELB to be provisioned..."
            sleep 15
          done

      - name: Build Frontend Image with Backend URL
        run: |
          cd webapp
          echo "REACT_APP_BACKEND_URL=${{ env.BACKEND_URL }}" > .env
          cat .env
          docker build -t ${{ vars.DOCKER_USERNAME }}/webapp:latest .

      - name: Push Frontend Image
        run: |
          docker push ${{ vars.DOCKER_USERNAME }}/webapp:latest

      - name: Frontend Deployment
        run: |
          kubectl apply -f .github/workflows/k8s/fe-deployment.yml
          kubectl apply -f .github/workflows/k8s/fe-service.yml

      - name: Get Frontend Service LoadBalancer URL
        run: |
          echo "Waiting for Frontend LoadBalancer external IP..."
          for i in {1..10}; do
            FRONTEND_IP=$(kubectl get svc lms-fe-service -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [[ "$FRONTEND_IP" != "" ]]; then
              echo "‚úÖ Frontend is available at: http://$FRONTEND_IP"
              echo "FRONTEND_URL=http://$FRONTEND_IP" >> $GITHUB_ENV
              break
            fi
            echo "‚è≥ Waiting 15s for ELB to be provisioned..."
            sleep 15
          done
      - name: View Postgres Logs
        run: |
          POD=$(kubectl get pods -l component=postgres -o jsonpath="{.items[0].metadata.name}")
          echo "üì¶ Postgres Pod: $POD"
          kubectl logs $POD
      - name: View Backend Logs
        run: |
          POD=$(kubectl get pods -l app=lms-be -o jsonpath="{.items[0].metadata.name}")
          echo "üöÄ Backend Pod: $POD"
          kubectl logs $POD

      - name: Slack Notification - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: GitHub Actions
          SLACK_COLOR: good
          SLACK_TITLE: "‚úÖ LMS Deployment Successful"
          SLACK_MESSAGE: |
            LMS EKS Deployment completed.
            - Backend: ${{ env.BACKEND_URL }}
            - Frontend: ${{ env.FRONTEND_URL }}

      - name: Slack Notification - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: GitHub Actions
          SLACK_COLOR: danger
          SLACK_TITLE: "‚ùå LMS Deployment Failed"
          SLACK_MESSAGE: "An error occurred during deployment."


